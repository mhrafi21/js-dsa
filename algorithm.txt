- Introduction of the fundamentals of algorithms
- A practical take on algorithms with JavaScript
- Part one of a two part(Algorithm and Data structure) course

Course Topics -
-------------------
- algorithms
- measuring performance
- Time and Space complexity
- Big O notation
- Math algorithms
- Sort
- Search
- Misc. algorithms and problem solving

Prerequisites -
---------------------
- Modern JavaScript
- ES2015 Topics

Before we begin -
- It might seem hard and that is because it is hard;
- Have a pen and paper and trace the execution of code with a sample input.



- What is algorithms?
-----------------------
An algorithms is a set of well-defined instructions to solve a particular problem.

Programming - algorithm to add two numbers

input - two numbers
algorithm - add numbers using "+" and return the value
output - sum of a and b

Characteristics-
---------------------
- Well defined inputs and outputs
- Each step should be clear and unambiguous
- Language independent

Why should we learn Algorithm -
-----------------------------------------
As a developer, you're going to come across problems that you need to solve learning algorithms translates to learning different techniques to efficiently solve those problems.
- One problem can be solved in many ways using different algorithms
- Every algorithm comes with its own tradeoffs when it comes to performance.

Algorithm analysis - 
--------------------------
- There are multiple ways to solve one problem
Ex:There are multiple algorithms to sort a list of numbers
How do we analysis  which one of them is the most efficient algorithm?
- Generally, when we talk about performance, we use an absolute measure if I can run 100 meters in 12 seconds, I'm faster than someone who takes 15 seconds.

Algorithm analysis contd.
-----------------------------
The absolute running time of an algorithm cannot be predicted, since it depends on a number of factors 
- Programming Language used to implement the algorithm
- The computer the program runs on
- Other programs running at the same time
- Quality of the operating system


Evaluation
--------------------------
Algorithm analysis contd.
--------------------------
We evaluate the performance of an algorithm in terms of its input size.

Time complexity - Amount of time taken by an algorithm to run, as a function of input size.

Space complexity - Amount of memory taken by an algorithm to run, as function input size

By evaluating against the input size, the analysis is not only machine independent but the comparison is also more appropriate.


There is no one solution thats works every single time. It is always good to know multiple ways to solve the problem and use the best solution, given your constraints.

If your app needs to be very quick and has plenty of memory to work with, you don't have to worry about Space complexity

If you have very little memory to work with, you should pick a solution that is relatively slower but needs less space.

How to represent complexity
--------------------------------------------
Asymptotic notations
--------------------
- Mathematical tools to represent time and space complexity

1. Big-O Notation (O-notation) - Worst case complexity
2. Omega Notation - Best case complexity
3. Theta Notation - Average case complexity


Big-O Notation - 
-----------------

The worst case complexity of an algorithm is represented using the Big-O notation
Big-O notation describes the complexity of an algorithm using algebraic terms 

It has two important Characteristics -
-----------------------------------------
- It is expressed in terms of the input 
- If focus on the bigger picture without caught up in the minute details


Big-O Time complexity - 
------------------------

function summation(n){
    let sum = 0; -------------------it is use only one 
    for(let i = 1: i <= n: i++){
        sum +=i; ------------------- it's run 4 times
    }
    return sum --------------------- it's only one;
}

summation(4) ------------------------ if we give 4
-- Count the number of times a statement executes based on the input size.


It focuses on the bigger picture getting caught without getting caught up in the minute details.

n + 2

n = 100 ---- 100 + 2

Time complexity --
---------------------
for(i=1; i<=n; i++){
    for(j=1; j<=i; j++){

    }
}

O(n power 2) - Quadratic ; 3n2 + 5n + 1;
-------------------
for(i=1; i<=n; i++){
    for(j=1; j<=i; j++){
        for(k=1; k<=j; k++){
     }
    }
}
O(n power 3) Cubic


Space complexity --
---------------------
O(1) - constant 
O(n) - Linear
O(logn) - Logarithmic

- Multiple algorithms exist for the same problem and there is no more right solution. Different algorithms work well under different constraints

- The same algorithm with the same Programming Language can be implemented in different ways.

- When writing programs at work, don't lose sight of the big picture. Rather tan writing clever code, write code that is simple to read and maintain.


Objects - Big-O
-------------------
const persons = {
    firstName: "Bruce",
    lastName: "Wayne"
}


An object is a collection of key value pairs-
-----------------------------------------------
constant 
insert - O(1)
remove - O(1)
Access - O(1)

linear - 
Search - O(n)
Object.keys() - O(n)
Object.values() - O(n)
Object.entries - O(n)



Array - Big - O
-------------------
const odd = [1,3,5,7,9]

An Array is a collection of key value pairs-
-----------------------------------------------
constant 
insert/remove at end - O(1)
insert/remove at beginning - O(n)
Access - O(1)

Search - O(n)
shift/unshift/slice/splice - O(n)
forEach/map/filter/reduce - O(n)


Math Algorithms -
-----------------
- Fibonacci sequence
- Factorial of a number
- Prime number
- Power of two
- Recursion
- Fibonacci sequence with Recursion
- Factorial of a number with Recursion

The approach
------------
- Problem statement
- Try solving the problem
- Implement the solution together 
- Determining the Big-O of the solution




